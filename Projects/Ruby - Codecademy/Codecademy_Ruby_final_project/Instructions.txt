Ruby Final Project
Estimated time: About 12 hours

Ruby Todo List Program
In this project, you’ll use Ruby to create a Todo List project you can read and write to. To do this you’ll be leaving Codecademy’s learning environment and building locally, on your own computer.


At the end of this project, you can expect to come out with a Todo List program you can manipulate from the command line. More importantly, you’ll also have a better understanding of Ruby programming fundamentals, as well as experiencing running and manipulating files from the command line.

We’ll walk you through the steps required, but our goal is to give you the experience of building. The project will be (and should be!) challenging. If at any time, you feel stuck or confused, review the Ruby course or take a peek at the solution code that is given to you.

How To Use This Guide
This final project is different from the other work you’ve done on Codecademy in two important ways:

You’ll build locally, from your computer, instead of in the Codecademy learning environment.
We’ll provide instruction, but also encourage you to come up with solution on your own.
Beyond the initial setup, each step of the program you build will have solution code that you can show or hide, based on your level and preferences
We’ve compiled resources to help you navigate through the steps involved, but expect you’ll need to do research as well to supplement what’s provided here. Good research, much like the ability to build from scratch, is an essential skill of a good developer, and a day-to-day part of the job for any working engineer. You’ll be learning as much about how to solve your own problems as you will about Ruby – and that’s a good thing!

This project starts with a list of requirements (in the form of user stories) that will help you structure your to-do list. We’ll then walk you through set-up (explaining what tools you need, and how to configure them), before teaching a few new key skills. From there, we’ll help you plan the specifics of your to-do list interactions, and give you a few tips on how to implement them.

What Are User Stories?
User stories are descriptions from the perspective of the end-user meant to capture the essence of a program’s features. In the case of your todo list, the end-user is whoever is making a list of todo items.

User stories are usually in the first-person point of view, or in other words, “I” statements. For example, “As a user, I can make Todo List items, and then delete items as I complete them.”

Approaching features and bugs from the user’s point-of-view will help you create features that have a positive impact on the end-user.

Ruby Todo List User Stories
We’ve broken the todo list user stories into three categories. The "Primary" user stories describe the core features of a real world todo list. This project guide will provide support for these in the form of instruction and code samples.

“Secondary” user stories are less fundamental to the idea of a real-world todo list. This guide provides some support for these user stories as well.

“Reach” user stories are a mix of near crucial and secondary user stories that we leave to you as a challenge once you have completed the Ruby Final Project.

Core User Stories

As a user I can create a todo list
As a user I can add tasks to the todo list
As a user I can see all the tasks in a list
As a user I can manipulate the todo list through a menu
Secondary User Stories

As a user I can open a list from a text file
As a user I can save a list to a text file
As a user I can delete a task
As a user I can update a task
Reach User Stories

As a user I can set a task status
As a user I can toggle a task status as complete or incomplete